{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://ziksrslyraqhygilcvct.supabase.co';\n\n// For React apps, environment variables MUST start with REACT_APP_\n// Vercel needs REACT_APP_SUPABASE_ANON_KEY (not NEXT_PUBLIC_)\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Debug logging for production troubleshooting\nconsole.log('Supabase Debug:', {\n  url: supabaseUrl,\n  hasKey: !!supabaseKey,\n  keyLength: supabaseKey ? supabaseKey.length : 0,\n  keyPrefix: supabaseKey ? supabaseKey.substring(0, 20) + '...' : 'none',\n  allReactEnvVars: Object.keys(process.env).filter(key => key.startsWith('REACT_APP_')),\n  nodeEnv: process.env.NODE_ENV\n});\n\n// Only create client if we have the key\nexport const supabase = supabaseKey ? createClient(supabaseUrl, supabaseKey) : null;\n\n// Helper function to check if Supabase is properly configured\nexport const isSupabaseConfigured = () => {\n  return supabaseUrl && supabaseKey && supabase !== null;\n};\n\n// Test function to verify Supabase connectivity\nexport const testSupabaseConnection = async () => {\n  if (!supabase) {\n    return {\n      success: false,\n      error: 'Supabase client not initialized - missing API key'\n    };\n  }\n  try {\n    console.log('ðŸ§ª Testing Supabase connection...');\n\n    // Test 1: Check if we can call the auth API\n    const {\n      data: {\n        user\n      },\n      error: userError\n    } = await supabase.auth.getUser();\n    console.log('ðŸ‘¤ User check result:', {\n      user: !!user,\n      error: userError === null || userError === void 0 ? void 0 : userError.message\n    });\n\n    // Test 2: Try to get session (this should work even without login)\n    const {\n      data: {\n        session\n      },\n      error: sessionError\n    } = await supabase.auth.getSession();\n    console.log('ðŸŽ« Session check result:', {\n      session: !!session,\n      error: sessionError === null || sessionError === void 0 ? void 0 : sessionError.message\n    });\n    return {\n      success: true,\n      tests: {\n        userCheck: {\n          success: !userError,\n          error: userError === null || userError === void 0 ? void 0 : userError.message\n        },\n        sessionCheck: {\n          success: !sessionError,\n          error: sessionError === null || sessionError === void 0 ? void 0 : sessionError.message\n        }\n      }\n    };\n  } catch (error) {\n    console.error('ðŸ’¥ Supabase connection test failed:', error);\n    return {\n      success: false,\n      error: error.message,\n      details: error\n    };\n  }\n};\n\n// Log final status\nconsole.log('Supabase Client Status:', {\n  configured: isSupabaseConfigured(),\n  clientExists: !!supabase\n});\n\n// Run connection test if in development\nif (process.env.NODE_ENV === 'development' && supabase) {\n  testSupabaseConnection().then(result => {\n    console.log('ðŸ§ª Supabase Connection Test:', result);\n  });\n}","map":{"version":3,"names":["createClient","supabaseUrl","supabaseKey","process","env","REACT_APP_SUPABASE_ANON_KEY","console","log","url","hasKey","keyLength","length","keyPrefix","substring","allReactEnvVars","Object","keys","filter","key","startsWith","nodeEnv","NODE_ENV","supabase","isSupabaseConfigured","testSupabaseConnection","success","error","data","user","userError","auth","getUser","message","session","sessionError","getSession","tests","userCheck","sessionCheck","details","configured","clientExists","then","result"],"sources":["/Users/alexanderamundsen/Documents/site/src/lib/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = 'https://ziksrslyraqhygilcvct.supabase.co'\n\n// For React apps, environment variables MUST start with REACT_APP_\n// Vercel needs REACT_APP_SUPABASE_ANON_KEY (not NEXT_PUBLIC_)\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY\n\n// Debug logging for production troubleshooting\nconsole.log('Supabase Debug:', {\n  url: supabaseUrl,\n  hasKey: !!supabaseKey,\n  keyLength: supabaseKey ? supabaseKey.length : 0,\n  keyPrefix: supabaseKey ? supabaseKey.substring(0, 20) + '...' : 'none',\n  allReactEnvVars: Object.keys(process.env).filter(key => key.startsWith('REACT_APP_')),\n  nodeEnv: process.env.NODE_ENV\n})\n\n// Only create client if we have the key\nexport const supabase = supabaseKey \n  ? createClient(supabaseUrl, supabaseKey)\n  : null\n\n// Helper function to check if Supabase is properly configured\nexport const isSupabaseConfigured = () => {\n  return supabaseUrl && supabaseKey && supabase !== null\n}\n\n// Test function to verify Supabase connectivity\nexport const testSupabaseConnection = async () => {\n  if (!supabase) {\n    return {\n      success: false,\n      error: 'Supabase client not initialized - missing API key'\n    }\n  }\n\n  try {\n    console.log('ðŸ§ª Testing Supabase connection...')\n    \n    // Test 1: Check if we can call the auth API\n    const { data: { user }, error: userError } = await supabase.auth.getUser()\n    console.log('ðŸ‘¤ User check result:', { user: !!user, error: userError?.message })\n    \n    // Test 2: Try to get session (this should work even without login)\n    const { data: { session }, error: sessionError } = await supabase.auth.getSession()\n    console.log('ðŸŽ« Session check result:', { session: !!session, error: sessionError?.message })\n    \n    return {\n      success: true,\n      tests: {\n        userCheck: { success: !userError, error: userError?.message },\n        sessionCheck: { success: !sessionError, error: sessionError?.message }\n      }\n    }\n  } catch (error) {\n    console.error('ðŸ’¥ Supabase connection test failed:', error)\n    return {\n      success: false,\n      error: error.message,\n      details: error\n    }\n  }\n}\n\n// Log final status\nconsole.log('Supabase Client Status:', {\n  configured: isSupabaseConfigured(),\n  clientExists: !!supabase\n})\n\n// Run connection test if in development\nif (process.env.NODE_ENV === 'development' && supabase) {\n  testSupabaseConnection().then(result => {\n    console.log('ðŸ§ª Supabase Connection Test:', result)\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}