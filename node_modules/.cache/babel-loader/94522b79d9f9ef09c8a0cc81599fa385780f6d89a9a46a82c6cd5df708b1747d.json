{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderamundsen/Documents/site/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase, isSupabaseConfigured } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    console.log('🔄 AuthContext: Initializing authentication state...');\n\n    // Check if Supabase is configured\n    if (!isSupabaseConfigured() || !supabase) {\n      console.warn('⚠️ AuthContext: Supabase is not configured. Authentication features will be disabled.');\n      console.log('🔍 AuthContext: Configuration check:', {\n        isConfigured: isSupabaseConfigured(),\n        clientExists: !!supabase,\n        hasKey: !!process.env.REACT_APP_SUPABASE_ANON_KEY\n      });\n      setLoading(false);\n      return;\n    }\n    console.log('✅ AuthContext: Supabase is configured, getting session...');\n\n    // Get session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user4;\n      console.log('📡 AuthContext: Session check complete');\n      console.log('🎫 AuthContext: Session data:', session ? 'Present' : 'None');\n      if (session) {\n        var _session$user, _session$user2, _session$user3;\n        console.log('👤 AuthContext: User found in session:', {\n          id: (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.id,\n          email: (_session$user2 = session.user) === null || _session$user2 === void 0 ? void 0 : _session$user2.email,\n          confirmed_at: (_session$user3 = session.user) === null || _session$user3 === void 0 ? void 0 : _session$user3.email_confirmed_at\n        });\n      }\n      setSession(session);\n      setUser((_session$user4 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user4 !== void 0 ? _session$user4 : null);\n      if (session !== null && session !== void 0 && session.user) {\n        console.log('👤 AuthContext: Fetching user profile...');\n        fetchProfile(session.user.id);\n      }\n      setLoading(false);\n      console.log('✅ AuthContext: Initial setup complete');\n    });\n    console.log('👂 AuthContext: Setting up auth state listener...');\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user5;\n      console.log('🔄 AuthContext: Auth state changed');\n      console.log('📝 AuthContext: Event:', _event);\n      console.log('🎫 AuthContext: New session:', session ? 'Present' : 'None');\n      setSession(session);\n      setUser((_session$user5 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user5 !== void 0 ? _session$user5 : null);\n      if (session !== null && session !== void 0 && session.user) {\n        console.log('👤 AuthContext: User logged in, fetching profile...');\n        fetchProfile(session.user.id);\n        // Log session creation\n        logSecurityEvent('login', {\n          method: 'session'\n        });\n      } else {\n        console.log('👋 AuthContext: User logged out, clearing profile...');\n        setProfile(null);\n      }\n    });\n    return () => {\n      console.log('🧹 AuthContext: Cleaning up auth listener...');\n      subscription.unsubscribe();\n    };\n  }, []);\n  const fetchProfile = async userId => {\n    console.log('👤 AuthContext: fetchProfile called for user:', userId);\n    if (!isSupabaseConfigured()) {\n      console.warn('⚠️ AuthContext: Cannot fetch profile - Supabase not configured');\n      return;\n    }\n    try {\n      console.log('📡 AuthContext: Querying profiles table...');\n      const {\n        data,\n        error\n      } = await supabase.from('profiles').select('*').eq('id', userId).single();\n      console.log('📨 AuthContext: Profile query response received');\n      console.log('✅ AuthContext: Profile data:', data ? 'Present' : 'None');\n      console.log('❌ AuthContext: Profile error:', error ? error.message : 'None');\n      if (!error && data) {\n        console.log('✅ AuthContext: Profile fetched successfully');\n        setProfile(data);\n      } else if (error) {\n        console.warn('⚠️ AuthContext: Profile fetch failed:', error.message);\n        console.log('💡 AuthContext: This might be normal if profiles table doesn\\'t exist or user has no profile');\n      }\n    } catch (err) {\n      console.error('💥 AuthContext: Unexpected error fetching profile:', err);\n    }\n  };\n  const logSecurityEvent = async (action, details = {}) => {\n    if (!user || !isSupabaseConfigured()) return;\n    try {\n      await supabase.rpc('log_security_event', {\n        p_user_id: user.id,\n        p_action: action,\n        p_details: details,\n        p_ip_address: null,\n        // Would get from server\n        p_user_agent: navigator.userAgent\n      });\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  };\n  const value = {\n    user,\n    profile,\n    session,\n    loading,\n    logSecurityEvent\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"fJESv9dZ9H9qGOnZJbXKgSW+0Yw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","isSupabaseConfigured","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","profile","setProfile","loading","setLoading","session","setSession","console","log","warn","isConfigured","clientExists","hasKey","process","env","REACT_APP_SUPABASE_ANON_KEY","auth","getSession","then","data","_session$user4","_session$user","_session$user2","_session$user3","id","email","confirmed_at","email_confirmed_at","fetchProfile","subscription","onAuthStateChange","_event","_session$user5","logSecurityEvent","method","unsubscribe","userId","error","from","select","eq","single","message","err","action","details","rpc","p_user_id","p_action","p_details","p_ip_address","p_user_agent","navigator","userAgent","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexanderamundsen/Documents/site/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase, isSupabaseConfigured } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [session, setSession] = useState(null);\n\n  useEffect(() => {\n    console.log('🔄 AuthContext: Initializing authentication state...');\n    \n    // Check if Supabase is configured\n    if (!isSupabaseConfigured() || !supabase) {\n      console.warn('⚠️ AuthContext: Supabase is not configured. Authentication features will be disabled.');\n      console.log('🔍 AuthContext: Configuration check:', {\n        isConfigured: isSupabaseConfigured(),\n        clientExists: !!supabase,\n        hasKey: !!process.env.REACT_APP_SUPABASE_ANON_KEY\n      });\n      setLoading(false);\n      return;\n    }\n\n    console.log('✅ AuthContext: Supabase is configured, getting session...');\n\n    // Get session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      console.log('📡 AuthContext: Session check complete');\n      console.log('🎫 AuthContext: Session data:', session ? 'Present' : 'None');\n      \n      if (session) {\n        console.log('👤 AuthContext: User found in session:', {\n          id: session.user?.id,\n          email: session.user?.email,\n          confirmed_at: session.user?.email_confirmed_at\n        });\n      }\n      \n      setSession(session);\n      setUser(session?.user ?? null);\n      if (session?.user) {\n        console.log('👤 AuthContext: Fetching user profile...');\n        fetchProfile(session.user.id);\n      }\n      setLoading(false);\n      console.log('✅ AuthContext: Initial setup complete');\n    });\n\n    console.log('👂 AuthContext: Setting up auth state listener...');\n    \n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      console.log('🔄 AuthContext: Auth state changed');\n      console.log('📝 AuthContext: Event:', _event);\n      console.log('🎫 AuthContext: New session:', session ? 'Present' : 'None');\n      \n      setSession(session);\n      setUser(session?.user ?? null);\n      if (session?.user) {\n        console.log('👤 AuthContext: User logged in, fetching profile...');\n        fetchProfile(session.user.id);\n        // Log session creation\n        logSecurityEvent('login', { method: 'session' });\n      } else {\n        console.log('👋 AuthContext: User logged out, clearing profile...');\n        setProfile(null);\n      }\n    });\n\n    return () => {\n      console.log('🧹 AuthContext: Cleaning up auth listener...');\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const fetchProfile = async (userId) => {\n    console.log('👤 AuthContext: fetchProfile called for user:', userId);\n    \n    if (!isSupabaseConfigured()) {\n      console.warn('⚠️ AuthContext: Cannot fetch profile - Supabase not configured');\n      return;\n    }\n    \n    try {\n      console.log('📡 AuthContext: Querying profiles table...');\n      \n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      console.log('📨 AuthContext: Profile query response received');\n      console.log('✅ AuthContext: Profile data:', data ? 'Present' : 'None');\n      console.log('❌ AuthContext: Profile error:', error ? error.message : 'None');\n\n      if (!error && data) {\n        console.log('✅ AuthContext: Profile fetched successfully');\n        setProfile(data);\n      } else if (error) {\n        console.warn('⚠️ AuthContext: Profile fetch failed:', error.message);\n        console.log('💡 AuthContext: This might be normal if profiles table doesn\\'t exist or user has no profile');\n      }\n    } catch (err) {\n      console.error('💥 AuthContext: Unexpected error fetching profile:', err);\n    }\n  };\n\n  const logSecurityEvent = async (action, details = {}) => {\n    if (!user || !isSupabaseConfigured()) return;\n    \n    try {\n      await supabase.rpc('log_security_event', {\n        p_user_id: user.id,\n        p_action: action,\n        p_details: details,\n        p_ip_address: null, // Would get from server\n        p_user_agent: navigator.userAgent\n      });\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    session,\n    loading,\n    logSecurityEvent\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}